#!/usr/bin/env ruby

# This script ensures vim-mode-next is up to date

# It:
# - checks to see if new commits are ready upstream
# - checks whether any new PRs have been opened
# - checks for new commits on PRs that we've merged
# - checks whether any PRs we're watching have been closed


require 'rugged'
require 'github_api'

# repo = Rugged::Repository.new('.')
# repo.fetch('atom')

$open_prs = {}
Github.new.pull_requests.all('atom', 'vim-mode', state: 'open').each_page { |page|
  $open_prs.merge! page.map { |pr| [ pr.number, pr ] }.sort.to_h
}
$open_prnos = $open_prs.keys
puts "#{$open_prnos.length} open prs: #{$open_prnos}"

def generate_prstring prno
  pr = $open_prs[prno]
  "* [##{prno}](#{pr.html_url}) #{pr.title}"
end

def print_prs title, prnos, para={}
  return if prnos.empty?
  puts title
  puts prnos.map { |prno|
    para[prno] || generate_prstring(prno)
  }.join("\n")
end

def merged para
  print_prs "Closed Merged Pull Requests:", para.keys - $open_prnos, para
  $open_prnos -= para.keys
  para
end

def unmerged para
  print_prs "Closed WIP Pull Requests:", para.keys - $open_prnos, para
  $open_prnos -= para.keys
  para
end

def refused para
  print_prs "Closed Refused Pull Requests:", para.keys - $open_prnos, para
  $open_prnos -= para.keys
  para
end

def parse_para para
  # hash each line by its pull request number
  Hash[
    para.split("\n").map { |s|
      s =~ /^\* \[#(\d+)\]/
      [$1.to_i, s]
    }.sort
  ]
end

para_dispatch = [ :merged, :unmerged, :refused ]
readme = File.read('README.md').split(/\n[ \t]*\n/).map! do |para|
  if !para_dispatch.empty? && para =~ /^\* \[#\d+\]/
    method(para_dispatch.shift).call(parse_para para).values.join("\n")
  else
    para
  end
end.join("\n\n")
File.write('README.md', readme)

print_prs "Pull Requests To Add:", $open_prnos
